# ~/.inputrc

## INCLUDE SYSTEM INPUTRC ==================================================={{{
#
# If ~/.inputrc (or the file defined by the environment variable 'INPUTRC')
# exists and is readable, the system configuration file /etc/inputrc is not
# taken into account. It is possible to use system settings by including the
# system file (or any other) from the custom file, with the '$include'
# directive. So, uncomment the line below if you want to include system
# inputrc settings:
#
#$include /etc/inputrc
## ==========================================================================}}}

## SET READLINE VARIABLES ==================================================={{{

# bell-style (audible) {{{
# Controls what happens when readline wants to ring the terminal bell.  If  set
# to  none,  readline never rings the bell.  If set to visible, readline uses a
# visible bell if one is available.  If set to audible,  readline  attempts  to
# ring the terminal's bell.
#}}}
set bell-style none

# bind-tty-special-chars (On) {{{
# If  set to On (the default), readline attempts to bind the control characters
# treated specially by the kernel's terminal driver to their  readline  equiva‐
# lents.
#}}}
#set bind-tty-special-chars on

# blink-matching-paren (Off) {{{
# If  set  to  On,  readline  attempts to briefly move the cursor to an opening
# parenthesis when a closing parenthesis is inserted.
#}}}
set blink-matching-paren on

# colored-completion-prefix (Off) {{{
# If set to On, when listing completions, readline displays the  common  prefix
# of  the set of possible completions using a different color.  The color defi‐
# nitions are taken from the value of the LS_COLORS environment variable.
#}}}
set colored-completion-prefix on

# colored-stats (Off) {{{
# If set to On, readline displays possible completions using  different  colors
# to  indicate their file type.  The color definitions are taken from the value
# of the LS_COLORS environment variable.
#}}}
set colored-stats on

# comment-begin (``#'') {{{
# The string that is inserted in vi mode when the insert-comment command is ex‐
# ecuted.   This  command  is bound to M-# in emacs mode and to # in vi command
# mode.
#}}}
#set comment-begin #

# completion-display-width (-1) {{{
# The number of screen columns used to display possible matches when performing
# completion.   The  value  is ignored if it is less than 0 or greater than the
# terminal screen width.  A value of 0 will cause matches to be  displayed  one
# per line.  The default value is -1.
#}}}
#set completion-display-width -1

# completion-ignore-case (Off) {{{
# If  set  to  On,  readline  performs  filename  matching  and completion in a
# case-insensitive fashion.
#}}}
set completion-ignore-case on

# completion-map-case (Off) {{{
# If set to On, and completion-ignore-case is enabled, readline treats  hyphens
# (-)  and underscores (_) as equivalent when performing case-insensitive file‐
# name matching and completion.
#}}}
#set completion-map-case off

# completion-prefix-display-length (0) {{{
# The length in characters of the common prefix of a list of  possible  comple‐
# tions  that  is  displayed without modification.  When set to a value greater
# than zero, common prefixes longer than this value are replaced with an ellip‐
# sis when displaying possible completions.
#}}}
#set completion-prefix-display-length 0

# completion-query-items (100) {{{
# This determines when the user is queried about viewing the number of possible
# completions generated by the possible-completions command.  It may be set  to
# any  integer  value greater than or equal to zero.  If the number of possible
# completions is greater than or equal to the value of this variable, the  user
# is  asked  whether  or  not he wishes to view them; otherwise they are simply
# listed on the terminal.  A negative value causes readline to never ask.
#}}}
#set completion-query-items 100

# convert-meta (On) {{{
# If set to On, readline will convert characters with the eighth bit set to  an
# ASCII  key  sequence by stripping the eighth bit and prefixing it with an es‐
# cape character (in effect, using escape as the meta prefix).  The default  is
# On,  but readline will set it to Off if the locale contains eight-bit charac‐
# ters.
#}}}
set convert-meta off

# disable-completion (Off) {{{
# If set to On, readline will inhibit word completion.   Completion  characters
# will be inserted into the line as if they had been mapped to self-insert.
#}}}
#set disable-completion off

# echo-control-characters (On) {{{
# When  set to On, on operating systems that indicate they support it, readline
# echoes a character corresponding to a signal generated from the keyboard.
#}}}
#set echo-control-characters on

# editing-mode (emacs) {{{
# Controls whether readline begins with a set of key bindings similar to  Emacs
# or vi.  editing-mode can be set to either emacs or vi.
#}}}
#set editing-mode emacs

# emacs-mode-string (@) {{{
# This string is displayed immediately before the  last  line  of  the  primary
# prompt  when  emacs editing mode is active.  The value is expanded like a key
# binding, so the standard set of meta- and control prefixes and backslash  es‐
# cape  sequences is available.  Use the \1 and \2 escapes to begin and end se‐
# quences of non-printing characters, which can be used  to  embed  a  terminal
# control sequence into the mode string.
#}}}
set emacs-mode-string @

# enable-bracketed-paste (Off) {{{
# When  set  to On, readline will configure the terminal in a way that will en‐
# able it to insert each paste into the editing buffer as a  single  string  of
# characters,  instead  of  treating each character as if it had been read from
# the keyboard.  This can prevent pasted characters from being  interpreted  as
# editing commands.
#}}}
set enable-bracketed-paste off

# enable-keypad (Off) {{{
# When set to On, readline will try to enable the application keypad when it is
# called.  Some systems need this to enable the arrow keys.
#}}}
#set enable-keypad off

# enable-meta-key (On) {{{
# When set to On, readline will try to enable any meta modifier key the  termi‐
# nal  claims to support when it is called.  On many terminals, the meta key is
# used to send eight-bit characters.
#}}}
#set enable-meta-key on

# expand-tilde (Off) {{{
# If set to On, tilde expansion is performed when readline attempts  word  com‐
# pletion.
#}}}
#set expand-tilde off

# history-preserve-point (Off) {{{
# If  set  to On, the history code attempts to place point at the same location
# on each history line retrieved with previous-history or next-history.
#}}}
set history-preserve-point on

# history-size (unset) {{{
# Set the maximum number of history entries saved in the history list.  If  set
# to  zero,  any  existing  history  entries are deleted and no new entries are
# saved.  If set to a value less than zero, the number of  history  entries  is
# not  limited.   By default, the number of history entries is not limited.  If
# an attempt is made to set history-size to a non-numeric  value,  the  maximum
# number of history entries will be set to 500.

## If unset, bash's HISTFILESIZE value (or default, 500) is applied. If set, it
## overrides bash's HISTFILESIZE.  This is why it is explicitelely  set here to
## not limit history entries, even if it is its default behaviour.
#}}}
set history-size -1

# horizontal-scroll-mode (Off) {{{
# When  set  to On, makes readline use a single line for display, scrolling the
# input horizontally on a single screen line when it becomes  longer  than  the
# screen width rather than wrapping to a new line.
#}}}
#set horizontal-scroll-mode off

# input-meta (Off) {{{
# If  set  to  On,  readline  will enable eight-bit input (that is, it will not
# clear the eighth bit in the characters it reads), regardless of what the ter‐
# minal  claims it can support.  The name meta-flag is a synonym for this vari‐
# able.  The default is Off, but readline will set it to On if the locale  con‐
# tains eight-bit characters.
#}}}
set input-meta on

# isearch-terminators (``C-[ C-J'') {{{
# The  string of characters that should terminate an incremental search without
# subsequently executing the character as a command.  If this variable has  not
# been  given a value, the characters ESC and C-J will terminate an incremental
# search.
#}}}
#set isearch-terminators C-[C-J

# keymap (emacs) {{{
# Set the current readline keymap.  The set of legal  keymap  names  is  emacs,
# emacs-standard,  emacs-meta,  emacs-ctlx, vi, vi-move, vi-command, and vi-in‐
# sert.  vi is equivalent to vi-command; emacs is equivalent to emacs-standard.
# The  default  value is emacs.  The value of editing-mode also affects the de‐
# fault keymap.
#}}}
#set keymap emacs

# keyseq-timeout (500) {{{
# Specifies the duration readline will wait for a character when reading an am‐
# biguous key sequence (one that can form a complete key sequence using the in‐
# put  read  so  far, or can take additional input to complete a longer key se‐
# quence).  If no input is received within the timeout, readline will  use  the
# shorter  but  complete key sequence.  The value is specified in milliseconds,
# so a value of 1000 means that readline will wait one  second  for  additional
# input.   If this variable is set to a value less than or equal to zero, or to
# a non-numeric value, readline will wait until another key is pressed  to  de‐
# cide which key sequence to complete.
#}}}
#set keyseq-timeout 500

# mark-directories (On) {{{
# If set to On, completed directory names have a slash appended.
#}}}
#set mark-directories on

# mark-modified-lines (Off) {{{
# If set to On, history lines that have been modified are displayed with a pre‐
# ceding asterisk (*).
#}}}
#set mark-modified-lines off

# mark-symlinked-directories (Off) {{{
# If set to On, completed names which are symbolic links to directories have  a
# slash appended (subject to the value of mark-directories).
#}}}
set mark-symlinked-directories on

# match-hidden-files (On) {{{
# This variable, when set to On, causes readline to match files whose names be‐
# gin with a `.' (hidden files) when performing filename completion.  If set to
# Off,  the leading `.' must be supplied by the user in the filename to be com‐
# pleted.
#}}}
#set match-hidden-files on

# menu-complete-display-prefix (Off) {{{
# If set to On, menu completion displays the common prefix of the list of  pos‐
# sible completions (which may be empty) before cycling through the list.
#}}}
#set menu-complete-display-prefix off

# output-meta (Off) {{{
# If  set  to  On, readline will display characters with the eighth bit set di‐
# rectly rather than as a meta-prefixed escape sequence.  The default  is  Off,
# but readline will set it to On if the locale contains eight-bit characters.
#}}}
set output-meta on

# page-completions (On) {{{
# If  set to On, readline uses an internal more-like pager to display a screen‐
# ful of possible completions at a time.
#}}}
#set page-completions on

# print-completions-horizontally (Off) {{{
# If set to On, readline will display completions with matches sorted  horizon‐
# tally in alphabetical order, rather than down the screen.
#}}}
#set print-completions-horizontally off

# revert-all-at-newline (Off) {{{
# If  set to On, readline will undo all changes to history lines before return‐
# ing when accept-line is executed.  By default, history lines may be  modified
# and retain individual undo lists across calls to readline.
#}}}
#set revert-all-at-newline off

# show-all-if-ambiguous (Off) {{{
# This  alters the default behavior of the completion functions.  If set to On,
# words which have more than one possible completion cause the  matches  to  be
# listed immediately instead of ringing the bell.
#}}}
#set show-all-if-ambiguous off

# show-all-if-unmodified (Off) {{{
# This  alters  the  default  behavior of the completion functions in a fashion
# similar to show-all-if-ambiguous.  If set to On, words which have  more  than
# one possible completion without any possible partial completion (the possible
# completions don't share a common prefix) cause the matches to be listed imme‐
# diately instead of ringing the bell.
#}}}
#set show-all-if-unmodified off

# skip-completed-text (Off) {{{
# If  set  to  On, this alters the default completion behavior when inserting a
# single match into the line.  It's only active when performing  completion  in
# the  middle  of a word.  If enabled, readline does not insert characters from
# the completion that match characters after point in the word being completed,
# so portions of the word following the cursor are not duplicated.
#}}}
set skip-completed-text on

# vi-cmd-mode-string ((cmd)) {{{
# This  string  is  displayed  immediately  before the last line of the primary
# prompt when vi editing mode is active and in command mode.  The value is  ex‐
# panded  like a key binding, so the standard set of meta- and control prefixes
# and backslash escape sequences is available.  Use the \1 and  \2  escapes  to
# begin  and end sequences of non-printing characters, which can be used to em‐
# bed a terminal control sequence into the mode string.
#}}}
#set vi-cmd-mode-string (cmd)

# vi-ins-mode-string ((ins)) {{{
# This string is displayed immediately before the  last  line  of  the  primary
# prompt  when  vi  editing mode is active and in insertion mode.  The value is
# expanded like a key binding, so the standard set of meta-  and  control  pre‐
# fixes and backslash escape sequences is available.  Use the \1 and \2 escapes
# to begin and end sequences of non-printing characters, which can be  used  to
# embed a terminal control sequence into the mode string.
#}}}
#set vi-ins-mode-string (ins)

# visible-stats (Off) {{{
# If  set  to  On, a character denoting a file's type as reported by stat(2) is
# appended to the filename when listing possible completions.
#}}}
set visible-stats on

## ==========================================================================}}}

## MAP READLINE FUNCTIONS ==================================================={{{
#
# If you modify this file, you can reload it on the fly instead of disconnect
# and reconnect. The default keys to do that are <Ctrl-X><Ctrl-R> ():
"\C-x\C-r": re-read-init-file
#
# Behaviour of the TAB key:
"\C-i": complete
# If you prefer, use this:
#"\C-i": menu-complete
# Then, if you want to bind 'menu-complete-backward' to <Shift-Tab>, this may
# be done automatically by remapping keys, like ($if Bash):
#"\e[Z": "\e-1\C-i"
#
# tell the shell to expand the line (variables, command substitutions...)
# with <Ctrl-X><Ctrl-X> ():
"\C-x\C-x": shell-expand-line
#
# <Alt-L> do the same than <Ctrl-L> ():
#"\el": clear-screen
#
# [Ctrl & <-] and [Ctrl & ->]:
"\e[1;5D": beginning-of-line
"\e[1;5C": end-of-line
#
# mappings for "up" and "down" arrows to search the history
"\e[A": history-search-backward
"\e[B": history-search-forward
#
# <Alt> with right or left arrows:
"\e[1;3C": menu-complete
"\e[1;3D": menu-complete-backward
## ==========================================================================}}}

## DEFINE READLINE MACROS ==================================================={{{
#
# NOTE to build a macro: {{{
# - At first, choose what action you want to do with what keys combination.
# - Find if the action you want to execute is a readline function (the complete
#   list of functions can be printed with the command 'bind -l'), or build the
#   proper string;
#   for a command like 'pwd -P', the string can be:
#   "pwd -P\n" (the command followed by newline into double quotes)
#   or:
#   "pwd -P\C-M" (the command followed by Ctrl-M into double quotes)
# - Be sure the combination of keys is not already used: test it in different
#   situations (virtual console or graphical terminal, screen, etc).
# - How to easily know the proper string to write for a combination of keys?
#   Run the 'cat' command and type your combination; for example, for the
#   keys <Shift-Tab>, it prints [Z into xterm and only a tab in linux
#   console. So, translate  into \e (for Escape).
# - Finally, our example is:
#   $if term=xterm
#     "\e[Z": "pwd -P\n"
#   $endif
# }}}
#
$if Bash
# This is a very useful tip to automatically bind the <Shift-Tab> sequence to
# 'menu-complete-backward' when the <Tab> key is bound to 'menu-complete'.
"\e[Z": "\e-1\C-i"
#
# insert double quotes & set cursor between them with <Ctrl-X><">
#"\C-x\"": "\"\"\C-b"
#
# insert single quotes & set cursor between them with <Ctrl-X><'>
#"\C-x'": "''\C-b"
#
#"\e\"": "\eb\"\ef\""
#"\e'": "\eb'\ef'"
#
# F10 toggles mc on and off. Note Ctrl-O toggles panes on and off in mc (switch
# between mc and shell within a mc process).
"\e[21~": "mc\n"
#
$endif
## ==========================================================================}}}

# vim: et ts=2 sts=2 sw=2 tw=80 fo=roc fdm=marker ft=readline

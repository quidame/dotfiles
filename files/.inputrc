# ~/.inputrc

## INCLUDE SYSTEM INPUTRC ==================================================={{{
#
# If ~/.inputrc (or the file defined by the environment variable 'INPUTRC')
# exists and is readable, the system configuration file /etc/inputrc is not
# taken into account. It is possible to use system settings by including the
# system file (or any other) from the custom file, with the '$include'
# directive. So, uncomment the line below if you want to include system
# inputrc settings:
#
#$include /etc/inputrc
## ==========================================================================}}}

## SET READLINE VARIABLES ==================================================={{{

# bell-style (audible) {{{
# Controls what happens when readline wants to ring the terminal bell.  If  set
# to  none,  readline never rings the bell.  If set to visible, readline uses a
# visible bell if one is available.  If set to audible,  readline  attempts  to
# ring the terminal's bell.
#}}}
set bell-style none
# bind-tty-special-chars (On) {{{
# If  set to On (the default), readline attempts to bind the control characters
# treated specially by the kernel's terminal driver to their  readline  equiva‐
# lents.
#}}}
# blink-matching-paren (Off) {{{
# If  set  to  On,  readline  attempts to briefly move the cursor to an opening
# parenthesis when a closing parenthesis is inserted.
#}}}
set blink-matching-paren on
# colored-completion-prefix (Off) {{{
# If set to On, when listing completions, readline displays the  common  prefix
# of  the set of possible completions using a different color.  The color defi‐
# nitions are taken from the value of the LS_COLORS environment variable.
#}}}
set colored-completion-prefix on
# colored-stats (Off) {{{
# If set to On, readline displays possible completions using  different  colors
# to  indicate their file type.  The color definitions are taken from the value
# of the LS_COLORS environment variable.
#}}}
set colored-stats on
# comment-begin (``#'') {{{
# The string that is inserted in vi mode when the insert-comment command is ex‐
# ecuted.   This  command  is bound to M-# in emacs mode and to # in vi command
# mode.
#}}}
# completion-display-width (-1) {{{
# The number of screen columns used to display possible matches when performing
# completion.   The  value  is ignored if it is less than 0 or greater than the
# terminal screen width.  A value of 0 will cause matches to be  displayed  one
# per line.  The default value is -1.
#}}}
# completion-ignore-case (Off) {{{
# If  set  to  On,  readline  performs  filename  matching  and completion in a
# case-insensitive fashion.
#}}}
set completion-ignore-case on
# completion-map-case (Off) {{{
# If set to On, and completion-ignore-case is enabled, readline treats  hyphens
# (-)  and underscores (_) as equivalent when performing case-insensitive file‐
# name matching and completion.
#}}}
# completion-prefix-display-length (0) {{{
# The length in characters of the common prefix of a list of  possible  comple‐
# tions  that  is  displayed without modification.  When set to a value greater
# than zero, common prefixes longer than this value are replaced with an ellip‐
# sis when displaying possible completions.
#}}}
# completion-query-items (100) {{{
# This determines when the user is queried about viewing the number of possible
# completions generated by the possible-completions command.  It may be set  to
# any  integer  value greater than or equal to zero.  If the number of possible
# completions is greater than or equal to the value of this variable, the  user
# is  asked  whether  or  not he wishes to view them; otherwise they are simply
# listed on the terminal.  A negative value causes readline to never ask.
#}}}
# convert-meta (On) {{{
# If set to On, readline will convert characters with the eighth bit set to  an
# ASCII  key  sequence by stripping the eighth bit and prefixing it with an es‐
# cape character (in effect, using escape as the meta prefix).  The default  is
# On,  but readline will set it to Off if the locale contains eight-bit charac‐
# ters.
#}}}
set convert-meta off
# disable-completion (Off) {{{
# If set to On, readline will inhibit word completion.   Completion  characters
# will be inserted into the line as if they had been mapped to self-insert.
#}}}
# echo-control-characters (On) {{{
# When  set to On, on operating systems that indicate they support it, readline
# echoes a character corresponding to a signal generated from the keyboard.
#}}}
# editing-mode (emacs) {{{
# Controls whether readline begins with a set of key bindings similar to  Emacs
# or vi.  editing-mode can be set to either emacs or vi.
#}}}
# emacs-mode-string (@) {{{
# This string is displayed immediately before the  last  line  of  the  primary
# prompt  when  emacs editing mode is active.  The value is expanded like a key
# binding, so the standard set of meta- and control prefixes and backslash  es‐
# cape  sequences is available.  Use the \1 and \2 escapes to begin and end se‐
# quences of non-printing characters, which can be used  to  embed  a  terminal
# control sequence into the mode string.
#}}}
# enable-bracketed-paste (Off) {{{
# When  set  to On, readline will configure the terminal in a way that will en‐
# able it to insert each paste into the editing buffer as a  single  string  of
# characters,  instead  of  treating each character as if it had been read from
# the keyboard.  This can prevent pasted characters from being  interpreted  as
# editing commands.
#}}}
# enable-keypad (Off) {{{
# When set to On, readline will try to enable the application keypad when it is
# called.  Some systems need this to enable the arrow keys.
#}}}
# enable-meta-key (On) {{{
# When set to On, readline will try to enable any meta modifier key the  termi‐
# nal  claims to support when it is called.  On many terminals, the meta key is
# used to send eight-bit characters.
#}}}
# expand-tilde (Off) {{{
# If set to On, tilde expansion is performed when readline attempts  word  com‐
# pletion.
#}}}
# history-preserve-point (Off) {{{
# If  set  to On, the history code attempts to place point at the same location
# on each history line retrieved with previous-history or next-history.
#}}}
set history-preserve-point on
# history-size (unset) {{{
# Set the maximum number of history entries saved in the history list.  If  set
# to  zero,  any  existing  history  entries are deleted and no new entries are
# saved.  If set to a value less than zero, the number of  history  entries  is
# not  limited.   By default, the number of history entries is not limited.  If
# an attempt is made to set history-size to a non-numeric  value,  the  maximum
# number of history entries will be set to 500.

## If unset, bash's HISTFILESIZE value (or default, 500) is applied. If set, it
## overrides bash's HISTFILESIZE.  This is why it is explicitelely  set here to
## not limit history entries, even if it is its default behaviour.
#}}}
set history-size -1
# horizontal-scroll-mode (Off) {{{
# When  set  to On, makes readline use a single line for display, scrolling the
# input horizontally on a single screen line when it becomes  longer  than  the
# screen width rather than wrapping to a new line.
#}}}
# input-meta (Off) {{{
# If  set  to  On,  readline  will enable eight-bit input (that is, it will not
# clear the eighth bit in the characters it reads), regardless of what the ter‐
# minal  claims it can support.  The name meta-flag is a synonym for this vari‐
# able.  The default is Off, but readline will set it to On if the locale  con‐
# tains eight-bit characters.
#}}}
set input-meta on
# isearch-terminators (``C-[ C-J'') {{{
# The  string of characters that should terminate an incremental search without
# subsequently executing the character as a command.  If this variable has  not
# been  given a value, the characters ESC and C-J will terminate an incremental
# search.
#}}}
# keymap (emacs) {{{
# Set the current readline keymap.  The set of legal  keymap  names  is  emacs,
# emacs-standard,  emacs-meta,  emacs-ctlx, vi, vi-move, vi-command, and vi-in‐
# sert.  vi is equivalent to vi-command; emacs is equivalent to emacs-standard.
# The  default  value is emacs.  The value of editing-mode also affects the de‐
# fault keymap.
#}}}
# keyseq-timeout (500) {{{
# Specifies the duration readline will wait for a character when reading an am‐
# biguous key sequence (one that can form a complete key sequence using the in‐
# put  read  so  far, or can take additional input to complete a longer key se‐
# quence).  If no input is received within the timeout, readline will  use  the
# shorter  but  complete key sequence.  The value is specified in milliseconds,
# so a value of 1000 means that readline will wait one  second  for  additional
# input.   If this variable is set to a value less than or equal to zero, or to
# a non-numeric value, readline will wait until another key is pressed  to  de‐
# cide which key sequence to complete.
#}}}
# mark-directories (On) {{{
# If set to On, completed directory names have a slash appended.
#}}}
# mark-modified-lines (Off) {{{
# If set to On, history lines that have been modified are displayed with a pre‐
# ceding asterisk (*).
#}}}
# mark-symlinked-directories (Off) {{{
# If set to On, completed names which are symbolic links to directories have  a
# slash appended (subject to the value of mark-directories).
#}}}
set mark-symlinked-directories on
# match-hidden-files (On) {{{
# This variable, when set to On, causes readline to match files whose names be‐
# gin with a `.' (hidden files) when performing filename completion.  If set to
# Off,  the leading `.' must be supplied by the user in the filename to be com‐
# pleted.
#}}}
# menu-complete-display-prefix (Off) {{{
# If set to On, menu completion displays the common prefix of the list of  pos‐
# sible completions (which may be empty) before cycling through the list.
#}}}
# output-meta (Off) {{{
# If  set  to  On, readline will display characters with the eighth bit set di‐
# rectly rather than as a meta-prefixed escape sequence.  The default  is  Off,
# but readline will set it to On if the locale contains eight-bit characters.
#}}}
set output-meta on
# page-completions (On) {{{
# If  set to On, readline uses an internal more-like pager to display a screen‐
# ful of possible completions at a time.
#}}}
# print-completions-horizontally (Off) {{{
# If set to On, readline will display completions with matches sorted  horizon‐
# tally in alphabetical order, rather than down the screen.
#}}}
# revert-all-at-newline (Off) {{{
# If  set to On, readline will undo all changes to history lines before return‐
# ing when accept-line is executed.  By default, history lines may be  modified
# and retain individual undo lists across calls to readline.
#}}}
# show-all-if-ambiguous (Off) {{{
# This  alters the default behavior of the completion functions.  If set to On,
# words which have more than one possible completion cause the  matches  to  be
# listed immediately instead of ringing the bell.
#}}}
# show-all-if-unmodified (Off) {{{
# This  alters  the  default  behavior of the completion functions in a fashion
# similar to show-all-if-ambiguous.  If set to On, words which have  more  than
# one possible completion without any possible partial completion (the possible
# completions don't share a common prefix) cause the matches to be listed imme‐
# diately instead of ringing the bell.
#}}}
# skip-completed-text (Off) {{{
# If  set  to  On, this alters the default completion behavior when inserting a
# single match into the line.  It's only active when performing  completion  in
# the  middle  of a word.  If enabled, readline does not insert characters from
# the completion that match characters after point in the word being completed,
# so portions of the word following the cursor are not duplicated.
#}}}
set skip-completed-text on
# vi-cmd-mode-string ((cmd)) {{{
# This  string  is  displayed  immediately  before the last line of the primary
# prompt when vi editing mode is active and in command mode.  The value is  ex‐
# panded  like a key binding, so the standard set of meta- and control prefixes
# and backslash escape sequences is available.  Use the \1 and  \2  escapes  to
# begin  and end sequences of non-printing characters, which can be used to em‐
# bed a terminal control sequence into the mode string.
#}}}
# vi-ins-mode-string ((ins)) {{{
# This string is displayed immediately before the  last  line  of  the  primary
# prompt  when  vi  editing mode is active and in insertion mode.  The value is
# expanded like a key binding, so the standard set of meta-  and  control  pre‐
# fixes and backslash escape sequences is available.  Use the \1 and \2 escapes
# to begin and end sequences of non-printing characters, which can be  used  to
# embed a terminal control sequence into the mode string.
#}}}
# visible-stats (Off) {{{
# If  set  to  On, a character denoting a file's type as reported by stat(2) is
# appended to the filename when listing possible completions.
#}}}

## ==========================================================================}}}

## MAP READLINE FUNCTIONS ==================================================={{{

# prefix-meta (ESC) {{{
# Metafy the next character typed. ESC f is equivalent to Meta-f.
#}}}
# do-uppercase-version (M-a, M-b, M-x, ...) {{{
# If  the metafied character x is lowercase,  run the command that  is bound to
# the corresponding uppercase character.
#}}}

# abort (C-g) {{{
# Abort the current editing command and  ring  the terminal's bell  (subject to
# the setting of bell-style).
#}}}
# accept-line (Newline, Return) {{{
# Accept the line regardless of where the cursor is. If this line is non-empty,
# it may be added to the history list for future recall with add_history().  If
# the  line  is a modified  history line, the  history line  is restored to its
# original state.
#}}}
# end-of-file (usually C-d) {{{
# The  character indicating  end-of-file  as set, for example, by ``stty''.  If
# this character is read when there are no characters on the line, and point is
# at the beginning of the line,  Readline interprets it as the end of input and
# returns EOF.
#}}}
# clear-screen (C-l) {{{
# Clear the screen leaving the current line  at the top of the screen.  With an
# argument, refresh the current line without clearing the screen.
#}}}
# redraw-current-line (not bound) {{{
# Refresh the current line.
#}}}

# complete (TAB) {{{
# Attempt to perform completion on the text before point. The actual completion
# performed is application-specific.  Bash,  for instance,  attempts completion
# treating the text as a variable (if the text begins with $), username (if the
# text begins with ~), hostname (if the text begins with @), or command (inclu-
# ding aliases and functions) in turn. If none of these produces a match, file-
# name completion is attempted.  Gdb,  on the other hand,  allows completion of
# program functions and variables,  and only attempts filename completion under
# certain circumstances.
#
## If you prefer, use this:
##"\C-i": menu-complete
## Then, if you want to bind 'menu-complete-backward' to <Shift-Tab>,  this may
## be done automatically by remapping keys, like ($if Bash):
##"\e[Z": "\e-1\C-i"
#}}}
# complete-command (M-!) {{{
#}}}
# complete-filename (M-/) {{{
#}}}
# complete-hostname (M-@) {{{
#}}}
# complete-into-braces (M-{) {{{
#}}}
# complete-username (M-~) {{{
#}}}
# complete-variable (M-$) {{{
#}}}
# insert-completions (M-*) {{{
# Insert  all  completions of  the text before point that would have been gene-
# rated by possible-completions.
#}}}
# possible-completions (M-?) {{{
# List the possible completions of the text before point. When displaying comp-
# lions, readline sets the number  of columns used for  display to the value of
# completion-display-width,  the value of the environment variable COLUMNS,  or
# the screen width, in that order.
#}}}
# menu-complete (not bound) {{{
# Similar to complete,  but replaces  the word  to be completed  with a  single
# match  from  the  list  of  possible  completions.    Repeated  execution  of
# menu-complete steps through the list of possible completions,  inserting each
# match  in turn.  At the end  of the  list of completions,  the bell  is  rung
# (subject to the setting of bell-style) and the original text is restored.  An
# argument of n  moves n positions forward  in the list of matches;  a negative
# argument  may  be used to  move  backward through the list.  This command  is
# intended to be bound to TAB, but is unbound by default.
#}}}
"\e[1;3C": menu-complete
# menu-complete-backward (not bound) {{{
# Identical to menu-complete,  but moves backward through the  list of possible
# completions,  as if  menu-complete  had been given a negative argument.  This
# command is unbound by default.
#}}}
"\e[1;3D": menu-complete-backward

# backward-char (C-b) {{{
# Move back a character.
#}}}
# forward-char (C-f) {{{
# Move forward a character.
#}}}
# backward-word (M-b) {{{
# Move back to the start of the current or previous word. Words are composed of
# alphanumeric characters (letters and digits).
#}}}
# forward-word (M-f) {{{
# Move forward to the end of the next word.  Words are composed of alphanumeric
# characters (letters and digits).
#}}}
# beginning-of-line (C-a) {{{
# Move to the start of the current line.
## As C-a is the keystroke  prefix in screen (and C-b in tmux),  do not use the
## default here. Use Ctrl+LeftArrow instead.
#}}}
"\e[1;5D": beginning-of-line
# end-of-line (C-e) {{{
# Move to the end of the line.
## Use Ctrl+RightArrow instead (see above about C-a).
#}}}
"\e[1;5C": end-of-line

# backward-delete-char (Rubout) {{{
# Delete the character behind the cursor.  When given a numeric argument,  save
# the deleted text on the kill ring.
#}}}
# backward-kill-line (C-x Rubout) {{{
# Kill backward to the beginning of the line.
#}}}
# backward-kill-word (M-Rubout) {{{
# Kill the word behind point.  Word boundaries  are  the  same as those used by
# backward-word.
#}}}
# delete-char (C-d) {{{
# Delete  the  character  at point.  If  this  function is  bound  to the  same
# character as the  tty EOF  character,  as C-d commonly is,  see above for the
# effects.
#}}}
# delete-char-or-list {{{
# Deletes the character under the cursor if not at  the beginning or end of the
# line  (like delete-char).  If at the end of the line,  behaves identically to
# possible-completions.
#}}}
# delete-horizontal-space (M-\) {{{
# Delete all spaces and tabs around point.
#}}}
# forward-backward-delete-char {{{
# Delete the character under the cursor, unless the cursor is at the end of the
# line, in which case the character behind the cursor is deleted.
#}}}

# capitalize-word (M-c) {{{
# Capitalize the current (or following) word. With a negative argument, capita-
# lize the previous word, but do not move point.
#}}}
# downcase-word (M-l) {{{
# Lowercase the current (or following) word.  With a negative argument,  lower-
# case the previous word, but do not move point.
#}}}
# upcase-word (M-u) {{{
# Uppercase the current (or following) word.  With a negative argument,  upper-
# case the previous word, but do not move point.
#}}}


# beginning-of-history (M-<) {{{
# Move to the first line in the history.
#}}}
# end-of-history (M->) {{{
# Move to the end of the input history, i.e., the line currently being entered.
#}}}
# previous-history (C-p) {{{
# Fetch the previous command from the history list, moving back in the list.
#}}}
# next-history (C-n) {{{
# Fetch the next command from the history list, moving forward in the list.
#}}}
# reverse-search-history (C-r) {{{
# Search  backward  starting at the  current line  and moving `up' through  the
# history as necessary. This is an incremental search.
#}}}
# forward-search-history (C-s) {{{
# Search  forward  starting at the  current line  and moving `down' through the
# history as necessary. This is an incremental search.
#}}}
# history-search-backward (not bound) {{{
# Search backward through  the history for the string of characters between the
# start of the current line and  the current cursor position  (the point).  The
# search string must match at the beginning of a history line.  This  is a non-
# incremental search.
#}}}
"\e[A": history-search-backward
# history-search-forward (not bound) {{{
# Search forward through  the history for the string of  characters between the
# start of the current line and the point.  The search string must match at the
# beginning of a history line. This is a non-incremental search.
#}}}
"\e[B": history-search-forward
# history-substring-search-backward (not bound) {{{
# Search backward through the history  for the string of characters between the
# start of the current line and the current cursor position  (the  point).  The
# search string may match anywhere in a history line. This is a non-incremental
# search.
#}}}
# history-substring-search-forward (not bound) {{{
# Search forward  through the history for the string of  characters between the
# start of the current line and the point. The search string may match anywhere
# in a history line. This is a non-incremental search.
#}}}
# non-incremental-reverse-search-history (M-p) {{{
# Search backward through the history starting at the current line using a non-
# incremental search for a string supplied by the user.
#}}}
# non-incremental-forward-search-history (M-n) {{{
# Search forward  through  the  history  using  a  non-incremental search for a
# string supplied by the user.
#}}}

# yank-nth-arg (M-C-y) {{{
# Insert the first argument to the previous command (usually the second word on
# the previous line) at point. With an argument n, insert the nth word from the
# previous command  (the words  in the  previous command begin with word 0).  A
# negative argument inserts the  nth word from the end of the previous command.
# Once the  argument  n  is computed,  the argument is extracted as if the "!n"
# history expansion had been specified.
#}}}
# yank-last-arg (M-., M-_) {{{
# Insert  the last  argument  to the previous  command  (the last  word  of the
# previous  history  entry).  With  a  numeric argument,  behave  exactly  like
# yank-nth-arg. Successive calls to yank-last-arg move back through the history
# list, inserting the last word (or the word  specified  by the argument to the
# first call)  of each line  in turn.  Any  numeric argument  supplied to these
# successive  calls  determines  the direction to move  through the history.  A
# negative  argument  switches the  direction  through  the  history  (back  or
# forward).  The history  expansion  facilities  are  used  to extract the last
# argument, as if the "!$" history expansion  had been specified.
#}}}
# quoted-insert (C-q, C-v) {{{
# Add the next  character  that you  type to the line verbatim.  This is how to
# insert characters like C-q, for example.
#}}}
# tab-insert (M-TAB) {{{
# Insert a tab character.
#}}}
# self-insert (a, b, A, 1, !, ...) {{{
# Insert the character typed.
#}}}
# transpose-chars (C-t) {{{
# Drag the character before point forward over the character  at point,  moving
# point forward as well.  If point is at the end of the line,  then this trans-
# poses the two characters before point. Negative arguments have no effect.
#}}}
# transpose-words (M-t) {{{
# Drag the word before point past the word after point,  moving point over that
# word as well. If point is at the  end  of  the line, this transposes the last
# two words on the line.
#}}}
# overwrite-mode {{{
# Toggle overwrite mode.  With an explicit positive numeric argument,  switches
# to overwrite mode.  With an explicit non-positive numeric argument,  switches
# to insert mode.  This command affects only emacs mode; vi mode does overwrite
# differently.  Each call to readline()  starts  in insert mode.  In  overwrite
# mode, characters  bound to self-insert replace the text  at point rather than
# pushing the text  to  the right.  Characters  bound  to  backward-delete-char
# replace the character before point with a space.  By default, this command is
# unbound.
#}}}
# kill-line (C-k) {{{
# Kill the text from point to the end of the line.
#}}}
# kill-whole-line {{{
# Kill all characters on the current line, no matter where point is.
#}}}
# kill-word (M-d) {{{
# Kill from point the end of the current word,  or if between words, to the end
# of the next word. Word boundaries are the same as those used by forward-word.
#}}}
# unix-line-discard (C-u) {{{
# Kill backward from point to the  beginning  of the  line.  The killed text is
# saved on the kill-ring.
#}}}
# unix-word-rubout (C-w) {{{
# Kill the word behind point, using white space as a word boundary.  The killed
# text is saved on the kill-ring.
#}}}
# unix-filename-rubout {{{
# Kill the word behind point,  using white space and the slash character as the
# word boundaries. The killed text is saved on the kill-ring.
#}}}
# kill-region {{{
# Kill the text between the point and mark  (saved cursor position).  This text
# is referred to as the region.
#}}}
# copy-region-as-kill {{{
# Copy the text in the region to the kill buffer.
#}}}
# copy-backward-word {{{
# Copy the word before point to the kill buffer.  The word boundaries  are  the
# same as backward-word.
#}}}
# copy-forward-word {{{
# Copy the word following point to the kill buffer. The word boundaries are the
# same as forward-word.
#}}}
# yank (C-y) {{{
# Yank the top of the kill ring into the buffer at point.
#}}}
# yank-pop (M-y) {{{
# Rotate  the kill ring,  and yank the new top.  Only works following  yank  or
# yank-pop.
#}}}
# digit-argument (M-0, M-1, ..., M--) {{{
# Add this digit to the argument already accumulating, or start a new argument.
# M-- starts a negative argument.
#}}}
# universal-argument {{{
# This is another way to specify  an  argument.  If this command is followed by
# one or more digits, optionally with a leading minus sign, those digits define
# the argument.  If  the  command is followed by digits,  executing  universal-
# argument again  ends  the  numeric argument,  but is otherwise ignored.  As a
# special case,  if this command is immediately followed by a character that is
# neither a digit or minus sign,  the  argument count  for  the next command is
# multiplied by four.  The argument count is initially one,  so  executing this
# function the first  time  makes the argument count four,  a second time makes
# the argument count sixteen, and so on.
#}}}

# call-last-kbd-macro (C-x e) {{{
# Re-execute the last  keyboard macro defined,  by making the characters in the
# macro  appear  as  if  typed  at  the keyboard.
#}}}
# end-kbd-macro (C-x )) {{{
# Stop  saving the characters typed  into the current keyboard macro  and store
# the definition.
#}}}
# print-last-kbd-macro () {{{
# Print the last  keyboard macro defined in a  format  suitable for the inputrc
# file.
#}}}
# start-kbd-macro (C-x () {{{
# Begin saving the characters typed into the current keyboard macro.
#}}}

# re-read-init-file (C-x C-r) {{{
# Read  in  the  contents of the inputrc file,  and incorporate any bindings or
# variable assignments found there.
#}}}
# undo (C-_, C-x C-u) {{{
# Incremental undo, separately remembered for each line.
#}}}
# revert-line (M-r) {{{
# Undo all changes made to this line.  This is like executing  the undo command
# enough times to return the line to its initial state.
#}}}
# tilde-expand (M-&) {{{
# Perform tilde expansion on the current word.
#}}}
# set-mark (C-@, M-<space>) {{{
# Set the mark to the point. If a numeric argument is supplied, the mark is set
# to that position.
#}}}
# exchange-point-and-mark (C-x C-x) {{{
# Swap the point with the mark. The current cursor position is set to the saved
# position, and the old cursor position is saved as the mark.
#}}}
# character-search (C-]) {{{
# A character is read and point is moved to the next occurrence of that charac-
# ter. A negative count searches for previous occurrences.
#}}}
# character-search-backward (M-C-]) {{{
# A  character  is  read and point is moved  to the previous occurrence of that
# character. A negative count searches for subsequent occurrences.
#}}}
# skip-csi-sequence {{{
# Read  enough characters to consume a multi-key sequence such as those defined
# for keys like  Home  and  End.  Such sequences  begin with a Control Sequence
# Indicator (CSI), usually ESC-[. If this sequence is bound to "\[",  keys pro-
# ducing such sequences  will have no effect unless explicitly bound to a read-
# line command, instead of inserting stray characters into the  editing buffer.
# This is unbound by default, but usually bound to ESC-[.
#}}}
# insert-comment (M-#) {{{
# Without a numeric argument,  the value of the readline comment-begin variable
# is inserted  at the beginning of the  current line.  If a numeric argument is
# supplied,  this command acts as a toggle:  if the characters at the beginning
# of the line do not match  the value of comment-begin,  the value is inserted,
# otherwise the characters in  comment-begin  are deleted from the beginning of
# the line.  In either case,  the line is accepted  as  if  a  newline had been
# typed.  The  default  value of  comment-begin  makes the current line a shell
# comment.  If a numeric argument  causes the comment character  to be removed,
# the line will be executed by the shell.
#}}}
# dump-functions {{{
# Print  all  of the functions  and  their key bindings to  the readline output
# stream.  If a numeric argument is supplied, the output is formatted in such a
# way that it can be made part of an inputrc file.
#}}}
# dump-variables {{{
# Print all of the settable variables and their  values to  the readline output
# stream.  If a numeric argument is supplied, the output is formatted in such a
# way that it can be made part of an inputrc file.
#}}}
# dump-macros {{{
# Print  all of the readline key sequences bound to macros and the strings they
# output.  If a numeric argument is supplied, the output is formatted in such a
# way that it can be made part of an inputrc file.
#}}}
# emacs-editing-mode (C-e) {{{
# When in vi command mode, this causes a switch to emacs editing mode.
#}}}
# vi-editing-mode (M-C-j) {{{
# When in emacs editing mode, this causes a switch to vi editing mode.
#}}}

## ==========================================================================}}}

## DEFINE READLINE MACROS ==================================================={{{
#
# NOTE to build a macro: {{{
# - At first, choose what action you want to do with what keys combination.
# - Find if the action you want to execute is a readline function (the complete
#   list of functions can be printed with the command 'bind -l'), or build the
#   proper string;
#   for a command like 'pwd -P', the string can be:
#   "pwd -P\n" (the command followed by newline into double quotes)
#   or:
#   "pwd -P\C-M" (the command followed by Ctrl-M into double quotes)
# - Be sure the combination of keys is not already used: test it in different
#   situations (virtual console or graphical terminal, screen, etc).
# - How to easily know the proper string to write for a combination of keys?
#   Run the 'cat' command and type your combination; for example, for the
#   keys <Shift-Tab>, it prints [Z into xterm and only a tab in linux
#   console. So, translate  into \e (for Escape).
# - Finally, our example is:
#   $if term=xterm
#     "\e[Z": "pwd -P\n"
#   $endif
# }}}
#
$if Bash
# This is a very useful tip to automatically bind the <Shift-Tab> sequence to
# 'menu-complete-backward' when the <Tab> key is bound to 'menu-complete'.
"\e[Z": "\e-1\C-i"
#
# insert double quotes & set cursor between them with <Ctrl-X><">
#"\C-x\"": "\"\"\C-b"
#
# insert single quotes & set cursor between them with <Ctrl-X><'>
#"\C-x'": "''\C-b"
#
#"\e\"": "\eb\"\ef\""
#"\e'": "\eb'\ef'"
#
# F10 toggles mc on and off. Note Ctrl-O toggles panes on and off in mc (switch
# between mc and shell within a mc process).
"\e[21~": "mc\n"
#
$endif
## ==========================================================================}}}

# vim: et ts=2 sts=2 sw=2 tw=80 fo=roc fdm=marker ft=readline

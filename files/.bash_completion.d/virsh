# Bash Completion snippet for the virsh command
#
# Before installing this file on your system, ensure you can access your
# hypervisor without to have to type a password.  Accessing it over ssh may be
# at no cost on a LAN with an ssh agent and a persistent control socket enabled
# on the client side.  In ~/.ssh/config, add the following options to the
# related hosts:
### ControlMaster auto
### ControlPersist yes
# This will help a lot to complete object names (guests to start/destroy or
# storages to resize, pool names, interfaces and networks to edit, etc) as this
# completion script may request the server for each completion attempt.

have virsh &&
_virsh() {

    local cur prev opts i connect
    alias -- --name="awk '{print \$1}'"

    # find all currently available applets (builtins or internal commands).
    # This is very responsive on my 7 years old laptop.
    local def_uri="test:///default qemu:///session qemu:///system lxc:/// xen:///"
    local options=$(virsh --help | grep -woEe '-[a-zA-Z]|--[a-z]+[-a-z]*')
    local commands=$(virsh help | awk '/^    / {print $1}')
    local groups=$(virsh help | awk -F "'" '/help keyword/ {print $2}')

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    prev=${COMP_WORDS[COMP_CWORD-1]}

    # check if a specific connection is to be used
    for (( i=1; i < COMP_CWORD-1; i++ )); do
        case "${COMP_WORDS[i]}" in
            -c|--connect)
                connect="${COMP_WORDS[i]} ${COMP_WORDS[i+1]}"
                break
                ;;
        esac
    done

    case "$cur" in
        -*)
            opts="$options"
            for i in ${COMP_WORDS[@]}; do
                if echo "$commands" | grep -qowe "$i"; then
                    opts="$(virsh help $i 2>/dev/null | grep -owEe '--[a-z]+[-a-z]*')"
                    break
                fi
            done
            COMPREPLY=( $(compgen -W "$opts" -- "$cur") )
            unalias -- --name
            return 0
            ;;
    esac

    case "$prev" in
        virsh)
            opts="$commands"
            ;;
        help)
            opts="$groups"
            case "$cur" in
                [a-z]*)
                    opts="$groups $commands"
                    ;;
            esac
            ;;
        --domain|autostart|dumpxml|edit|info)
            opts="$(virsh -q $connect list 2>/dev/null --name --all)" ;;
        start|undefine)
            opts="$(virsh -q $connect list 2>/dev/null --name --inactive)" ;;
        resume)
            opts="$(virsh -q $connect list 2>/dev/null --name --state-paused)" ;;
        suspend|reboot)
            opts="$(virsh -q $connect list 2>/dev/null --name --state-running)" ;;
        destroy)
            opts="$(virsh -q $connect list 2>/dev/null --name)" ;;

        --interface|iface-autostart|iface-dumpxml|iface-edit|iface-mac)
            opts="$(virsh -q $connect iface-list 2>/dev/null --all | --name)" ;;
        iface-start|iface-undefine)
            opts="$(virsh -q $connect iface-list 2>/dev/null --inactive | --name)" ;;
        iface-destroy)
            opts="$(virsh -q $connect iface-list 2>/dev/null | --name)" ;;

        --network|net-autostart|net-dumpxml|net-edit|net-info)
            opts="$(virsh -q $connect net-list 2>/dev/null --name --all)" ;;
        net-start|net-undefine)
            opts="$(virsh -q $connect net-list 2>/dev/null --name --inactive)" ;;
        net-destroy)
            opts="$(virsh -q $connect net-list 2>/dev/null --name)" ;;

        --pool|pool-autostart|pool-dumpxml|pool-edit|pool-info)
            opts="$(virsh -q $connect pool-list 2>/dev/null --all | --name)" ;;
        pool-start|pool-undefine)
            opts="$(virsh -q $connect pool-list 2>/dev/null --inactive | --name)" ;;
        pool-destroy)
            opts="$(virsh -q $connect pool-list 2>/dev/null | --name)" ;;

        -c|--connect|connect)
            opts="$(virsh -q $connect uri) $def_uri" ;;

        *)
            opts="$commands"
    esac

    COMPREPLY=( $(compgen -W "$opts" -- "$cur") )
    unalias -- --name
    return 0
}

[ "$have" ] && complete -F _virsh virsh

# vim: ft=sh et ts=4 sts=4 sw=4
